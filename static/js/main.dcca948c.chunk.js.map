{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["App","prompt","setPrompt","useState","image","setImage","loading","setLoading","sidebarOpen","setSidebarOpen","React","createElement","className","onClick","aria-label","type","value","onChange","e","target","placeholder","async","response","fetch","method","headers","Authorization","Content-Type","body","JSON","stringify","inputs","contentType","get","includes","json","alert","error","blob","imageObjectURL","URL","createObjectURL","disabled","src","alt","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0LA+FeA,MA5Ff,WACE,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAOC,GAAYF,mBAAS,OAC5BG,EAASC,GAAcJ,oBAAS,IAChCK,EAAaC,GAAkBN,oBAAS,GAoC/C,OACEO,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,UAAQC,UAAU,gBAChBF,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,MAAIC,UAAU,kBAAiB,cAC/BF,IAAAC,cAAA,KAAGC,UAAU,WAAU,yBACvBF,IAAAC,cAAA,UACEC,UAAU,WACVC,QAASA,IAAMJ,GAAgBD,GAC/BM,aAAW,kBAKjBJ,IAAAC,cAAA,OAAKC,UAAU,eACZJ,GACCE,IAAAC,cAAA,SAAOC,UAAU,WACfF,IAAAC,cAAA,MAAIC,UAAU,mBAAkB,kBAChCF,IAAAC,cAAA,MAAIC,UAAU,gBACZF,IAAAC,cAAA,UAAI,wBACJD,IAAAC,cAAA,UAAI,cACJD,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,UAAI,oBACJD,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UAAI,iBAKVD,IAAAC,cAAA,QAAMC,UAAU,gBACdF,IAAAC,cAAA,MAAIC,UAAU,yBACZF,IAAAC,cAAA,QAAMC,UAAU,kBAAiB,MAAS,oBAE5CF,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,SACEI,KAAK,OACLC,MAAOf,EACPgB,SAAWC,GAAMhB,EAAUgB,EAAEC,OAAOH,OACpCI,YAAY,8BAEdV,IAAAC,cAAA,UAAQE,QA3EIQ,UACpBd,GAAW,GACX,IACE,MAAMe,QAAiBC,MACrB,qFACA,CACEC,OAAQ,OACRC,QAAS,CACPC,cAAe,+CACfC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,OAAQ9B,MAI7B+B,EAAcV,EAASG,QAAQQ,IAAI,gBAEzC,GAAID,GAAeA,EAAYE,SAAS,oBAAqB,CAC3D,MAAMC,QAAab,EAASa,OAG5B,OAFAC,MAAM,WAAaD,EAAKE,OAAS,gCACjC9B,GAAW,GAIb,MAAM+B,QAAahB,EAASgB,OACtBC,EAAiBC,IAAIC,gBAAgBH,GAC3CjC,EAASkC,GACT,MAAOF,GACPD,MAAM,+CACP,QACC7B,GAAW,KA6C2BmC,SAAUpC,GACvCA,EAAU,gBAAkB,mBAGhCF,GAASM,IAAAC,cAAA,OAAKgC,IAAKvC,EAAOwC,IAAI,YAAYhC,UAAU,wBC5E3CiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVtBC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5C,IAAAC,cAACD,IAAM6C,WAAU,KACf7C,IAAAC,cAACX,EAAG,QDqHF,kBAAmBwD,WACrBA,UAAUC,cAAcC,MACrBC,KAAMC,IACLA,EAAaC,eAEdC,MAAOzB,IACN0B,QAAQ1B,MAAMA,EAAM2B","file":"static/js/main.dcca948c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [prompt, setPrompt] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const generateImage = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        \"https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-3.5-large\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Bearer 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\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ inputs: prompt }),\n        }\n      );\n\n      const contentType = response.headers.get(\"content-type\");\n\n      if (contentType && contentType.includes(\"application/json\")) {\n        const json = await response.json();\n        alert(\"Error: \" + (json.error || \"Unknown error from API\"));\n        setLoading(false);\n        return;\n      }\n\n      const blob = await response.blob();\n      const imageObjectURL = URL.createObjectURL(blob);\n      setImage(imageObjectURL);\n    } catch (error) {\n      alert(\"Failed to generate image, please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app dark-mode\">\n      <header className=\"hero-section\">\n        <div className=\"logo-text-container\">\n          <h1 className=\"gradient-title\">CHUCKCHUCK</h1>\n          <p className=\"tagline\">simply for everything</p>\n          <button\n            className=\"menu-dot\"\n            onClick={() => setSidebarOpen(!sidebarOpen)}\n            aria-label=\"Toggle menu\"\n          />\n        </div>\n      </header>\n\n      <div className=\"main-layout\">\n        {sidebarOpen && (\n          <aside className=\"sidebar\">\n            <h2 className=\"sidebar-heading\">Other Features</h2>\n            <ul className=\"sidebar-menu\">\n              <li>AI Podcast Generator</li>\n              <li>AI Hotline</li>\n              <li>AI Grammar Helper</li>\n              <li>Notes to Podcast</li>\n              <li>Project Helper</li>\n              <li>Music Generator</li>\n              <li>AI Chat Bot</li>\n            </ul>\n          </aside>\n        )}\n\n        <main className=\"main-content\">\n          <h2 className=\"image-generator-title\">\n            <span className=\"highlight-dark\">AI</span> IMAGE GENERATOR\n          </h2>\n          <div className=\"input-section\">\n            <input\n              type=\"text\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              placeholder=\"Enter your prompt here...\"\n            />\n            <button onClick={generateImage} disabled={loading}>\n              {loading ? \"Generating...\" : \"Generate Image\"}\n            </button>\n          </div>\n          {image && <img src={image} alt=\"Generated\" className=\"generated-image\" />}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}